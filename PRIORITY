               INCLUDE HPFIXUPS
               TITLE "PRIORITY"
***************************************************************************************************
***************************************************************************************************
***                                                                                             ***
***            PRIORITY - VOICE KILL, INITIALIZATION AND STARTUP VECTORS                        ***
***                                                                                             ***
***************************************************************************************************
***************************************************************************************************
;
NEG_EXT        EQU     0FFFFFF00H      ;USE IN MOVEQ INSTRUCTIONS WHERE ARG IS
                                       ;80H OR LARGER - HP XASM DOES NOT HANDLE
                                       ;SIGN-EXTEND CORRECTLY.  COSMETIC, KEEPS
                                       ;ACTUAL BYTE VALUE CLEARER.
;
               INCLUDE EQUATES         ;HDW ADDR AND CONSTANT DEFS, ABS_SHORT DIRECTIVE.
;
               INCLUDE S_BLK_EQU       ;SOUND CONTROL BLOCK DEFINITIONS.
;
               GLB     KILL_VOICE,STILL_WAITING,INIT_COMPLETE
               GLB     ZERO_THIS_CHIP
;
               EXTERNAL  VCA_RELEASE
               EXTERNAL  RT_NON_VEL_INIT,RT_VEL_INIT
               EXTERNAL  PITCH_PAN_BIT
               EXTERNAL  INIT_PITCH_PAN
               EXTERNAL  PITCH_OUTPUT
               EXTERNAL  PAD_VEL_TBL
;
               EXTERNAL  V_IDENTITY
               EXTERNAL  V_CTRL_ADDR
               EXTERNAL  V_ACTIVE_SUB
               EXTERNAL  V_IDLE_SUB
               EXTERNAL  V_PRIO_FLAG
               EXTERNAL  V_PRIO_VEC
               EXTERNAL  V_PRIO_TIME
               EXTERNAL  V_CHIP_CHAN
               EXTERNAL  V_CHIP_ADDR
               EXTERNAL  V_CHIP_MISC
               EXTERNAL  V_NON_VEL_LIST
               EXTERNAL  V_VEL_LIST
               EXTERNAL  V_VELOCITY
               EXTERNAL  V_PAD_VAL_PTR
               EXTERNAL  V_VCA_VECTOR
               EXTERNAL  V_VCF_VECTOR
               EXTERNAL  V_SOUND_SUB
               EXTERNAL  V_START_ADDR
               EXTERNAL  V_PITCH_PAN
               EXTERNAL  V_A_ATT_TIME
               EXTERNAL  V_A_SUS_TIME
               EXTERNAL  V_P_OFF_TIME
               EXTERNAL  V_N_OFF_TIME
;
;26NOV               EXTERNAL  S_START
;26NOV               EXTERNAL  S_END
;26NOV               EXTERNAL  S_LOOP_START
;26NOV               EXTERNAL  S_LOOP_END
;26NOV               EXTERNAL  S_LOOP_TYPE
;
               EXTERNAL  PRIO_INDEX
               EXTERNAL  PRIO_POINTER
               EXTERNAL  PRIO_DYNAMIC
               EXTERNAL  VOICES_TO_REL
               SKIP
;VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
;
; GENERAL NOTES:
;    PRIORITY ROUTINES ENTERED WITH A0 POINTING TO A VOICE COMMON BLOCK.
;    ALL REGISTERS DISPOSABLE, UNLESS NOTED OTHERWISE.
;
;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
               SKIP
;VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
;
; A VOICE'S TIME HAS COME - A NEW SOUND MUST RING OUT ....
; SQUELCH ANY SOUND ALREADY IN PROGRESS, TAKE INITIAL STEPS TOWARD MAKING THE NEW SOUND.
; FOR STARTERS, OUTPUT NEW PAN VALUE RIGHT NOW.
;
KILL_VOICE
               MOVE.L  V_CTRL_ADDR(A0),A1   ;FETCH POINTER TO THIS VOICE'S S/H CHANNELS,
               MOVE    #0,2(A1)             ;CLAMP VCA OFF.
               ST      V_PRIO_FLAG(A0)      ;BLOCK EXECUTION OF NON-PRIORITY VOICE VECTORS FOR NOW.
               MOVE.W  #ZERO_THIS_CHIP,V_PRIO_VEC(A0) ;SET UP NEXT VECTOR IN PRIORITY CHAIN,
               ADDQ    #1,V_PRIO_TIME(A0)             ;TIME IT FOR NEXT REALTIME INTERRUPT.
;
                                            ;SEE IF BACKGROUND HAS GENERATED NEW INITIAL PAN VALUE:
               MOVE    A0,A1                ;COPY POINTER TO VOICE COMMON BLOCK - AT THIS POINT,
               MOVE    V_IDLE_SUB(A1),A2    ;WE NEED TO LOOK IN IDLE VOICE SUB-BLOCK ....
               MOVE    #PITCH_PAN_BIT,D0    ;SEE IF PAN HAS BEEN STRICKEN FROM THE INIT LIST.
               AND     V_NON_VEL_LIST(A1),D0
               BEQ.S   KILL_40              ;BRANCH IF YAH, USE BACKGROUND-GENERATED VALUE.
               NOT     D0                   ;ELSE - CLEAR THE BIT, WE GOTS TO GENERATE IT NOW.
               AND     D0,V_NON_VEL_LIST(A1)
               MOVE    V_SOUND_SUB(A2),A4   ;SET POINTER TO SELECTED SOUND SUB-BLOCK,
               MOVE.W  #KILL_20,A0          ;SET "RETURN" ADDRESS,
               JMP     INIT_PITCH_PAN       ;EXECUTE THE PARAMETER-COMPUTE ROUTINE.
KILL_20
               MOVE    D1,0(A2,D2)          ;GENERATES WORD VALUE, "RETURNS" HERE -
                                            ;STORE VALUE IN THE ACTIVE VOICE SUB-BLOCK, 'COS YES,
                                            ;WE WILL NEED TO REFRESH PAN CV PERIODICALLY.
KILL_40
               MOVE.L  V_CTRL_ADDR(A1),A1        ;FETCH POINTER TO S/H CHANNELS FOR THIS VOICE,
               MOVE    V_PITCH_PAN(A2),4(A1)     ;PUT OUT THE SHINY NEW PAN VALUE.
               RTS
;
;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
;
;
;
;VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
;
; SECOND IN THE PRIORITY-ROUTINE CHAIN -
; BY NOW, VCA FOR THIS VOICE SHOULD BE OFF -
; JAM THE CHIP TO FORCED-ZERO LOCATION IN SAMPLE RAM (7FFFEH OR SAMPLE_RAM_END-2),
;
; NOTE: ALSO USED FOR BACKGROUND-EXECUTED CHIP-STOP AFTER VOICE DIES -
; THIS ROUTINE EXPECTS A0 BACK IN THE SAME CONDITION IT WENT OUT IN.
;
ZERO_THIS_CHIP
               MOVEQ   #NEG_EXT+84H,D0      ;JAM PITCH, SET LOOP ON/UNIDIR AS REQ'D FOR ADDR-JAM.
               OR      V_CHIP_CHAN(A0),D0   ;TACK ON THE CHIP CHANNEL FOR THIS VOICE.
               MOVE.L  V_CHIP_ADDR(A0),A1   ;FETCH POINTER TO CHIP FOR THIS VOICE.
               MOVE.B  D0,MISC(A1)          ;SELECT CHANNEL, WRITE CONTROL BITS TO IT.
               MOVE.B  #87H,ADDRHI(A1)      ;WRITE "7FFFEH" INTO RIGHT ADDRESS LATCH.
               MOVE.B  #0FFH,ADDRMID(A1)
               MOVE.B  #0FEH,ADDRLO(A1)
               MOVE.B  #07H,ADDRHI(A1)      ;WRITE "7FFFEH" INTO LEFT ADDRESS LATCH.
               MOVE.B  #0FFH,ADDRMID(A1)
               MOVE.B  #0FEH,ADDRLO(A1)
               BSET    #3,D0                ;SET JAM-ADDRESS BIT IN THIS CHIP/CHANNEL.
               MOVE.B  D0,MISC(A1)
               AND     #0FFF3H,D0                          ;SET UP TO UN-JAM,
               MOVE.W  #CHECK_VOICE_INIT,V_PRIO_VEC(A0)    ;BUT FIRST, SET UP NEXT PRIORITY VECTOR.
               ADDQ    #1,V_PRIO_TIME(A0)                  ;TIME IT FOR NEXT REALTIME INTERRUPT.
               MOVE.B  D0,MISC(A1)          ;NOW, UN-JAM ADDRESS AND PITCH, LET THERE BE ZERO-NESS.
               RTS
;
;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
               SKIP
;VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
;
; WE'D LIKE TO START THE VCA/VCF ENVELOPES AT THIS POINT -
; BUT FIRST WE MUST SEE WHETHER THE VOICE BLOCK IS COMPLETELY INITIALIZED.
;
CHECK_VOICE_INIT
               TST     V_NON_VEL_LIST(A0)   ;FIRST CHECK THE NON-VELOCITY-DEPENDENT INIT LIST -
               BNE     RT_NON_VEL_INIT      ;BRANCH IF SOMETHING LEFT UNFINISHED, GO FINISH IT.
                                            ;IF VELOCITY VALUE IS AVAILABLE, WILL PROCEED THROUGH
                                            ;ALL INIT INCLUDING VEL-INIT AND BRANCH BACK TO
                                            ;INIT_COMPLETE (BELOW) - ELSE WILL DO NON-VEL-INIT AND
                                            ;RTS TO REALTIME HANDLER, LEAVING STILL_WAITING AS
                                            ;PRIORITY VECTOR FOR THIS VOICE.
CHK_VINIT_20
               TST     V_VEL_LIST(A0)       ;NON-VEL INIT DONE - NOW CHECK VEL-DEPENDENT INIT -
               BEQ.S   START_ENVELOPES      ;BRANCH IF CLEAR - WE CAN GO RIGHT AHEAD.
;
;
STILL_WAITING
                                            ;VEL-INIT NOT DONE - DO WE HAVE VELOCITY VALUE?
               TST     V_VELOCITY(A0)       ;IS VELOCITY PRESENT IN VOICE BLOCK ALREADY?
               BNE.S   STILWAIT_30          ;IF YES, BACKGROUND IS ALREADY CHEWING ON IT OR IS
                                            ;ABOUT TO BEGIN - BUT WE'LL GET TO IT FIRST.
                                            ;IF NOT, WE'VE GOT US A PAD-EVENT VOICE -
               MOVE    V_PAD_VAL_PTR(A0),A1 ;VOICE BLOCK CONTAINS POINTER TO THIS PAD'S PAD_VALUE -
               MOVE    (A1),D1              ;SO - HAS THIS PAD'S VELOCITY BEEN READ?
               BEQ.S   STILWAIT_40          ;BRANCH IF NOT - IT'S JUST NOT HERE YET.
;
;22OCT               MOVE    PAD_TABLE_SEL,D0     ;IT'S HERE - WHAT PAD CHARACTERISTIC ARE WE USING?
;22OCT               BNE.S   STILWAIT_10          ;BRANCH IF NON-LINEAR - DO TABLE LOOKUP.
;22OCT               LSR.B   #3,D1                ;ELSE PERFORM LINEAR PAD-VALUE-TO-VEL CONVERSION,
;22OCT               BNE.S   STILWAIT_28          ;ALLOWING ONLY NON-ZERO VALUES TO PASS,
;22OCT               MOVEQ   #1,D1
;22OCT               BRA.S   STILWAIT_28          ;YAH 'N' KEEP MARCHIN'
;22OCT;
;22OCTSTILWAIT_10
;22OCT               LSR     #1,D1                ;TRANSFORM RAW VELOCITY VIA TABLE LOOKUP,
;22OCT               BEQ.S   STILWAIT_20          ;TREATING ZEROS AS ONES BY NOT SUBTRACTING 1 FROM THEM,
;22OCT               SUBQ    #1,D1                ;AND ALL TO STAY IN THE 0-126 OFFSET RANGE FOR TABLES.
;22OCTSTILWAIT_20
;22OCT               MOVE.L  #PAD_VEL_TABLES,A2   ;SET POINTER TO TABLE OF TABLES,
;22OCT               SUBQ    #1,D0                ;REMOVE OFFSET FROM SELECT SETTING,
;22OCT               ADD     D0,D0                ;FETCH POINTER TO SELECTED TABLE.
;22OCT               ADD     D0,D0
;22OCT               MOVE.L  0(A2,D0),A2
;22OCT               MOVE.B  0(A2,D1),D1          ;NOW FETCH DOT VALOSSIDY.
;
               LSR     #1,D1                ;TRANSFORM RAW VELOCITY VIA TABLE LOOKUP,
               BEQ.S   STILWAIT_24          ;TREATING ZEROS AS ONES BY NOT SUBTRACTING 1 FROM THEM,
               SUBQ    #1,D1                ;AND ALL TO STAY IN THE 0-126 OFFSET RANGE FOR TABLE.
STILWAIT_24
               MOVE.L  #PAD_VEL_TBL,A2      ;SET POINTER TO TABLE,
               MOVE.B  0(A2,D1),D1          ;NOW FETCH DOT VALOSSIDY.
STILWAIT_28
               MOVE    D1,V_VELOCITY(A0)    ;STORE THE TRANSFORMED-TO-GENERIC VELOCITY VALUE,
STILWAIT_30
               BRA     RT_VEL_INIT          ;GO FINISH UP ON THE INITIALIZATION - WHEN DONE, WILL
                                            ;BRANCH BACK TO INIT_COMPLETE (BELOW).
STILWAIT_40
               MOVE.W  #STILL_WAITING,V_PRIO_VEC(A0)  ;WE'RE STUCK HERE UNTIL WE GET PAD VELOCITY -
               MOVE    #1,V_PRIO_TIME(A0)             ;WE'LL TRY AGAIN AT NEXT REALTIME INTERRUPT.
               RTS
;
INIT_COMPLETE
               MOVE    PRIO_POINTER,A0      ;IN ALL THE HOOPLA, GUESS WHAT GOT LOST ....
;
START_ENVELOPES
               MOVE.L  V_ACTIVE_SUB(A0),D0  ;EXCHANGE ACTIVE AND IDLE VOICE SUB-BLOCK POINTERS.
               MOVE    D0,A1                ;WHILE WE'RE AT IT - A1 POINTS TO NEW ACTIVE SUB-BLOCK.
               SWAP    D0
               MOVE.L  D0,V_ACTIVE_SUB(A0)
;
               MOVE.L  V_CTRL_ADDR(A0),A2        ;SET POINTER TO S/H CHANNELS FOR THIS VOICE.
               MOVE    V_PITCH_PAN(A1),4(A2)     ;PUT OUT PAN CONTROL VOLTAGE.
               MOVE    V_VCA_VECTOR(A1),A3       ;USE NON-PRIO VCA VECTOR TO PUT OUT FIRST POINT.
               JSR     (A3)
               MOVE    V_VCF_VECTOR(A1),A3       ;USE NON-PRIO VCF VECTOR TO PUT OUT FIRST POINT.
               JSR     (A3)
               MOVE.W  #START_THIS_CHIP,V_PRIO_VEC(A0)     ;NEXT TIME THROUGH, START CHIP GOING.
               ADDQ    #1,V_PRIO_TIME(A0)
;
               RTS
;
;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
               SKIP
;06NOV;VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
;06NOV;
;06NOV; WELL!  WE GAVE VCF A HEAD START, NOW LET VCA GO TOO.
;06NOV;
;06NOVOPEN_UP_VCA
;06NOV               MOVE    V_ACTIVE_SUB(A0),A1  ;FETCH ACTIVE VOICE SUB-BLOCK POINTER.
;06NOV               MOVE.L  V_CTRL_ADDR(A0),A2   ;SET POINTER TO S/H CHANNELS FOR THIS VOICE.
;06NOV               MOVE    V_VCA_VECTOR(A1),A3  ;USE NON-PRIO VCA VECTOR TO PUT OUT FIRST POINT.
;06NOV               JSR     (A3)
;06NOV               MOVE.W  #START_THIS_CHIP,V_PRIO_VEC(A0)     ;NEXT TIME THROUGH, START CHIP GOING.
;06NOV               ADDQ    #1,V_PRIO_TIME(A0)
;06NOV;
;06NOV               RTS
;06NOV;
;06NOV;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
               SKIP
;VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
;
; NOW IT'S TIME TO KICK THE SOUND CHIP INTO ACTION (!) -
;
START_THIS_CHIP
               MOVEQ   #NEG_EXT+84H,D0      ;JAM PITCH, SET LOOP ON/UNIDIR AS REQ'D FOR ADDR-JAM.
               OR      V_CHIP_CHAN(A0),D0   ;TACK ON THE CHIP CHANNEL FOR THIS VOICE.
               MOVE.L  V_CHIP_ADDR(A0),A1   ;FETCH POINTER TO CHIP FOR THIS VOICE.
               MOVE.B  D0,MISC(A1)          ;SELECT CHANNEL, WRITE CONTROL BITS TO IT.
               MOVE    D0,V_CHIP_MISC(A0)   ;REMEMBER WHAT WE JUST SAID TO MR. MISC -
                                            ;PITCH INIT WILL NEED TO KNOW.
;
               MOVE    V_ACTIVE_SUB(A0),A1  ;SET POINTER TO ACTIVE VOICE SUB-BLOCK,
               BSR     PITCH_OUTPUT         ;OUTPUT INITIAL PITCH REGISTER VALUE.
;
               MOVE.L  V_CHIP_ADDR(A0),A1   ;FETCH POINTER TO CHIP FOR THIS VOICE.
               MOVE    V_ACTIVE_SUB(A0),A2  ;SET POINTER TO ACTIVE VOICE SUB-BLOCK.
               MOVE    V_CHIP_MISC(A0),D0   ;AAAAND, BRING THIS BACK TOO.
               MOVE    V_SOUND_SUB(A2),A3   ;SET POINTER TO SOUND SUB BLOCK FOR LOOP PARAMS.
               MOVE.B  S_LOOP_TYPE(A3),D1   ;FETCH LOOP/DIRECTION BITS.
               BTST    #5,D1                ;TEST PLAYBACK DIRECTION -
               BEQ     STC_FORWARD          ;BRANCH FOR FORWARD PLAYBACK.
;
               BSET    #5,D0                ;REVERSE PLAYBACK - SET REVERSE BIT,
               MOVE.B  D0,MISC(A1)          ;WRITE IT TO CHIP.
;
               TST.B   D1                   ;LOOP ON?  (BIT 7)
               BMI.S   STC_REV_LOOP         ;BRANCH IF YES.
;
               LEA     S_START+1(A3),A4     ;NO LOOP - WRITE S_START TO LEFT LATCH (AS END).
               MOVE.B  (A4)+,ADDRHI(A1)
               MOVE.B  (A4)+,ADDRMID(A1)
               MOVE.B  (A4),ADDRLO(A1)
               LEA     V_START_ADDR+1(A2),A4     ;WRITE EVENT START ADDR TO RIGHT LATCH (AS START).
               MOVE.B  (A4)+,D2
               BSET    #7,D2
               MOVE.B  D2,ADDRHI(A1)
               MOVE.B  (A4)+,ADDRMID(A1)
               MOVE.B  (A4),ADDRLO(A1)
               BSET    #3,D0                ;JAM ADDRESS (TO RIGHT LATCH ADDR).
               MOVE.B  D0,MISC(A1)
;881025               REPT    8                    ;DELAY - WE ALWAYS DO THIS BUT DON'T KNOW WHY ....
;881025               NOP
               .FOR COUNT = 1,8             ;DELAY - WE ALWAYS DO THIS BUT DON'T KNOW WHY ....
               NOP
               .ENDFOR
;
               AND.B   #21H,D0              ;SET LOOP OFF, KEEP REV DIR, UNJAM ADDRESS AND PITCH.
               MOVE.B  D0,MISC(A1)
               BRA     STC_DONE             ;GO SET UP NEXT PRIORITY VECTOR AND EXIT.
;
STC_REV_LOOP
                                                 ;LOOP ON -
               LEA     S_LOOP_START+1(A3),A4     ;WRITE S_LOOP_START TO LEFT LATCH (AS END).
               MOVE.B  (A4)+,ADDRHI(A1)
               MOVE.B  (A4)+,ADDRMID(A1)
               MOVE.B  (A4),ADDRLO(A1)
               LEA     V_START_ADDR+1(A2),A4     ;WRITE EVENT START ADDR TO RIGHT LATCH (AS START).
               MOVE.B  (A4)+,D2
               BSET    #7,D2
               MOVE.B  D2,ADDRHI(A1)
               MOVE.B  (A4)+,ADDRMID(A1)
               MOVE.B  (A4),ADDRLO(A1)
               BSET    #3,D0                ;JAM ADDRESS (TO RIGHT LATCH ADDR).
               MOVE.B  D0,MISC(A1)
;881025               REPT    8                    ;DELAY - WE ALWAYS DO THIS BUT DON'T KNOW WHY ....
;881025               NOP
               .FOR COUNT = 1,8             ;DELAY - WE ALWAYS DO THIS BUT DON'T KNOW WHY ....
               NOP
               .ENDFOR
               AND     #40H,D1              ;CLEAR ALL BUT LOOP MODE BIT,
               OR      D1,D0                ;DROP IT ONTO CONTROL WORD (HAS LOOP ON, REV, CHANNEL),
               AND     #0F3H,D0             ;CLEAR JAM-ADDR, JAM-PITCH BITS -
               MOVE.B  D0,MISC(A1)          ;OFF WE GO ....
               LEA     S_LOOP_END+1(A3),A4  ;WRITE S_LOOP_END TO RIGHT LATCH (AS LOOP START).
               MOVE.B  (A4)+,D2
               BSET    #7,D2
               MOVE.B  D2,ADDRHI(A1)
               MOVE.B  (A4)+,ADDRMID(A1)
               MOVE.B  (A4),ADDRLO(A1)
               BRA     STC_DONE             ;GO SET UP NEXT PRIORITY VECTOR AND EXIT.
;
STC_FORWARD
               TST.B   D1                   ;LOOP ON?  (BIT 7)
               BMI.S   STC_FWD_LOOP         ;BRANCH IF YES.
;
               LEA     S_END+1(A3),A4       ;NO LOOP - WRITE S_END TO RIGHT LATCH.
               MOVE.B  (A4)+,D2
               BSET    #7,D2
               MOVE.B  D2,ADDRHI(A1)
               MOVE.B  (A4)+,ADDRMID(A1)
               MOVE.B  (A4),ADDRLO(A1)
               LEA     V_START_ADDR+1(A2),A4     ;WRITE EVENT START ADDR TO LEFT LATCH.
               MOVE.B  (A4)+,ADDRHI(A1)
               MOVE.B  (A4)+,ADDRMID(A1)
               MOVE.B  (A4),ADDRLO(A1)
               BSET    #3,D0                ;JAM ADDRESS (TO LEFT LATCH ADDR).
               MOVE.B  D0,MISC(A1)
;881025               REPT    8                    ;DELAY - WE ALWAYS DO THIS BUT DON'T KNOW WHY ....
;881025               NOP
               .FOR COUNT = 1,8             ;DELAY - WE ALWAYS DO THIS BUT DON'T KNOW WHY ....
               NOP
               .ENDFOR
;
               AND.B   #1H,D0               ;SET LOOP OFF, UNJAM ADDRESS AND PITCH.
               MOVE.B  D0,MISC(A1)
               BRA.S   STC_DONE             ;GO SET UP NEXT PRIORITY VECTOR AND EXIT.
;
STC_FWD_LOOP
                                                 ;LOOP ON -
               LEA     S_LOOP_END+1(A3),A4       ;WRITE S_LOOP_END TO RIGHT LATCH.
               MOVE.B  (A4)+,D2
               BSET    #7,D2
               MOVE.B  D2,ADDRHI(A1)
               MOVE.B  (A4)+,ADDRMID(A1)
               MOVE.B  (A4),ADDRLO(A1)
               LEA     V_START_ADDR+1(A2),A4     ;WRITE EVENT START ADDR TO LEFT LATCH.
               MOVE.B  (A4)+,ADDRHI(A1)
               MOVE.B  (A4)+,ADDRMID(A1)
               MOVE.B  (A4),ADDRLO(A1)
               BSET    #3,D0                ;JAM ADDRESS (TO LEFT LATCH ADDR).
               MOVE.B  D0,MISC(A1)
;881025               REPT    8                    ;DELAY - WE ALWAYS DO THIS BUT DON'T KNOW WHY ....
;881025               NOP
               .FOR COUNT = 1,8             ;DELAY - WE ALWAYS DO THIS BUT DON'T KNOW WHY ....
               NOP
               .ENDFOR
               AND     #40H,D1              ;CLEAR ALL BUT LOOP MODE BIT,
               OR      D1,D0                ;DROP IT ONTO CONTROL WORD (HAS LOOP ON, FWD, CHANNEL),
               AND     #0F3H,D0             ;CLEAR JAM-ADDR, JAM-PITCH BITS -
               MOVE.B  D0,MISC(A1)          ;OFF WE GO ....
               LEA     S_LOOP_START+1(A3),A4     ;WRITE S_LOOP_START TO LEFT LATCH.
               MOVE.B  (A4)+,ADDRHI(A1)
               MOVE.B  (A4)+,ADDRMID(A1)
               MOVE.B  (A4),ADDRLO(A1)
;
;
STC_DONE
               MOVE    D0,V_CHIP_MISC(A0)   ;REMEMBER WHAT WE JUST SAID TO MR. MISC -
                                            ;PITCH BEND VECTOR WILL NEED TO KNOW.
               MOVE.W  #ARE_WE_GATED_OFF,V_PRIO_VEC(A0)    ;SET UP NEXT PRIORITY VECTOR AND EXIT.
               ADDQ    #1,V_PRIO_TIME(A0)
;
               RTS
;
;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
               SKIP
;VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
;
; FINAL STEP IN PRIORITY SEQUENCE -
; CHECK TO SEE IF GATE-OFF FOR THIS EVENT HAS ALREADY BEEN RECEIVED AND
; ACKNOWLEDGED IN BACKGROUND -
; PRIOR TO THE END OF PRIORITY SEQUENCE, GATE-OFF ACKNOWLEDGE IS LIMITED
; TO CLEARING OF THE GATE-ON BIT IN V_IDENTITY - CORRESPONDINGLY, VOICE
; INIT AND EARLIER STEPS IN PRIORITY SEQUENCE ASSUME GATE-ON STATUS.
; THIS IS NECESSARY BECAUSE THE NORMAL GATE-OFF PROCEDURE AND THE PRIO
; SEQUENCE WOULD TRIP OVER EACH OTHER IF ALLOWED TO USE NORMAL STYLE.
; NOW THAT WE ARE HERE, AND THE VOICE IS PRETTY MUCH ON ITS WAY, WE CAN
; DEAL REASONABLY WITH A PRECOCIOUS GATE-OFF - PROCEDURE IS IDENTICAL TO
; THAT USED BY BACKGROUND FOR A VOICE WHICH GETS GATE-OFF AFTER THE
; COMPLETION OF THE PRIORITY SEQUENCE.
;
ARE_WE_GATED_OFF
               MOVE    PRIO_INDEX,D0        ;FETCH VOICE INDEX FOR THIS VOICE,
               BCLR    D0,PRIO_DYNAMIC      ;SIGNAL THE END OF PRIORITY (FOR DYNAMIC-ASSIGN USE -
                                            ;MEANS NOTHING IF THIS IS A FIXED-ASSIGN VOICE, JA?)
;
               MOVE    V_ACTIVE_SUB(A0),A1                 ;DELAYED GATE-OFF TIME MAY HAVE BEEN
               MOVE    V_P_OFF_TIME(A0),V_N_OFF_TIME(A1)   ;RECEIVED WHILE IN PRIORITY SEQUENCE -
                                                           ;PROPAGATE IT TO VOICE SUB-BLOCK.
               BNE.S   YES_HE_IS            ;IF GATE-OFF TIME WAS NON-ZERO, THEN WE HAVE A SEQUENCE
                                            ;EVENT WHICH IS ALREADY GATED OFF - GATE-OFF REQUEST
                                            ;WILL BE GENERATED BY TIMEOUT, WE DON'T NEED TO BOTHER
                                            ;WITH THE FOLLOWING STUFF.
;
               BTST    #6,V_IDENTITY(A0)    ;THIS IS GATE STATUS BIT FOR ALL EVENT TYPES.
               BNE.S   NO_WE_ARE_NOT        ;BRANCH IF WE ARE NOT GATED OFF JUST YET.
;
               BSET    D0,VOICES_TO_REL     ;IF GATED OFF, SET BIT CORRESPONDING TO THIS VOICE
                                            ;IN RELEASE-REQUEST BIT MAP - REQUEST WILL BE
                                            ;ACKNOWLEDGED BY HIGH-PRIORITY BACKGROUND.
                                            ;WIPE OUT VCA PHASE TIMES AS APPROPRIATE -
               TST     V_A_SUS_TIME(A1)     ;IS VCA IN TIMED SUSTAIN MODE, NOT NEARLY DONE?
               BGT.S   YES_HE_IS            ;BRANCH IF YES, LEAVE ALLA IT ALONE.
               CLR     V_A_SUS_TIME(A1)     ;ELSE, WOMPIT - SUSTAIN IS OVER, BAY-BEE.  NOTE: ALSO
                                            ;ACTS AS FLAG CAUSING VOICE_RELEASER TO EXIT SUS LOOP.
               CLR     V_A_ATT_TIME(A1)     ;ATTACK IS NOW RETREATING TOO.
               MOVE.W  #VCA_RELEASE,V_VCA_VECTOR(A1) ;IN FACT, GUESS WHAT VCA IS DOING NOW.
YES_HE_IS
;
NO_WE_ARE_NOT
               SF      V_PRIO_FLAG(A0)      ;NOW IT BE TIME TO LET NON-PRIORITY VECTORS LOOSE.
               RTS                          ;EXIT, LEAVING V_PRIO_TIME = 0.
;
;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
